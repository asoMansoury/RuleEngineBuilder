// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RuleBuilderInfra.Persistence;

#nullable disable

namespace RuleBuilderInfra.Persistence.Migrations
{
    [DbContext(typeof(RuleEngineContext))]
    partial class RuleEngineContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RuleBuilderInfra.Domain.Entities.ActionEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CategoryService")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ServiceAssembly")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ActionEntities");
                });

            modelBuilder.Entity("RuleBuilderInfra.Domain.Entities.ActionPropertiesEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ActionEntityID")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertyType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActionEntityID");

                    b.ToTable("ActionPropertisEntities");
                });

            modelBuilder.Entity("RuleBuilderInfra.Domain.Entities.ActionRuleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("ActionEntityID")
                        .HasColumnType("bigint");

                    b.Property<long>("RuleEntityID")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ActionEntityID");

                    b.HasIndex("RuleEntityID");

                    b.ToTable("ActionRuleEntity");
                });

            modelBuilder.Entity("RuleBuilderInfra.Domain.Entities.ActionRulePropertiesEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("ActionPropertyEntityId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ActionRuleEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActionPropertyEntityId");

                    b.HasIndex("ActionRuleEntityId");

                    b.ToTable("ActionRulePropertiesEntity");
                });

            modelBuilder.Entity("RuleBuilderInfra.Domain.Entities.ConditionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ConditionEntities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "AND",
                            Name = "And"
                        },
                        new
                        {
                            Id = 2,
                            Code = "OR",
                            Name = "Or"
                        });
                });

            modelBuilder.Entity("RuleBuilderInfra.Domain.Entities.ConditionRuleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConditionCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ConditionEntityId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Operator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("RuleEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConditionEntityId");

                    b.HasIndex("ParentId");

                    b.HasIndex("RuleEntityId");

                    b.ToTable("ConditionRuleEntities");
                });

            modelBuilder.Entity("RuleBuilderInfra.Domain.Entities.FakeDataEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Distributer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Movie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FakeDataEntity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Distributer = "Paramond",
                            Movie = "Spider",
                            Province = "Ontario"
                        },
                        new
                        {
                            Id = 2,
                            Distributer = "Paramond",
                            Movie = "Sinderella",
                            Province = "Quebec"
                        },
                        new
                        {
                            Id = 3,
                            Distributer = "Disney",
                            Movie = "The Notebook",
                            Province = "Calgary"
                        },
                        new
                        {
                            Id = 4,
                            Distributer = "Lionsgate",
                            Movie = "SpiderMan",
                            Province = "Ontario"
                        },
                        new
                        {
                            Id = 5,
                            Distributer = "Lionsgate",
                            Movie = "The Notebook",
                            Province = "Quebec"
                        },
                        new
                        {
                            Id = 6,
                            Distributer = "Disney",
                            Movie = "Notebook",
                            Province = "Quebec"
                        },
                        new
                        {
                            Id = 7,
                            Distributer = "Disney",
                            Movie = "Sinderella",
                            Province = "Quebec"
                        });
                });

            modelBuilder.Entity("RuleBuilderInfra.Domain.Entities.FieldOperatorJoiningEntity", b =>
                {
                    b.Property<string>("OperatorTypeCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FieldTypeCode")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OperatorTypeCode", "FieldTypeCode");

                    b.HasIndex("FieldTypeCode");

                    b.ToTable("FieldOperatorJoiningEntities");

                    b.HasData(
                        new
                        {
                            OperatorTypeCode = "Eq",
                            FieldTypeCode = "Int32"
                        },
                        new
                        {
                            OperatorTypeCode = "NEq",
                            FieldTypeCode = "Int32"
                        },
                        new
                        {
                            OperatorTypeCode = "Gt",
                            FieldTypeCode = "Int32"
                        },
                        new
                        {
                            OperatorTypeCode = "Gte",
                            FieldTypeCode = "Int32"
                        },
                        new
                        {
                            OperatorTypeCode = "Lt",
                            FieldTypeCode = "Int32"
                        },
                        new
                        {
                            OperatorTypeCode = "Lte",
                            FieldTypeCode = "Int32"
                        },
                        new
                        {
                            OperatorTypeCode = "Eq",
                            FieldTypeCode = "ST"
                        },
                        new
                        {
                            OperatorTypeCode = "NEq",
                            FieldTypeCode = "ST"
                        });
                });

            modelBuilder.Entity("RuleBuilderInfra.Domain.Entities.FieldTypesEntity", b =>
                {
                    b.Property<string>("FieldTypeCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AssemblyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FieldType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FieldTypeCode");

                    b.HasIndex("FieldTypeCode")
                        .IsUnique();

                    b.ToTable("FieldTypesEntities");

                    b.HasData(
                        new
                        {
                            FieldTypeCode = "ST",
                            AssemblyName = "System.String",
                            FieldType = "String"
                        },
                        new
                        {
                            FieldTypeCode = "Int32",
                            AssemblyName = "System.Int32",
                            FieldType = "Int32"
                        },
                        new
                        {
                            FieldTypeCode = "Int64",
                            AssemblyName = "System.Int64",
                            FieldType = "Int64"
                        });
                });

            modelBuilder.Entity("RuleBuilderInfra.Domain.Entities.OperatorTypesEntity", b =>
                {
                    b.Property<string>("OperatorTypeCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OperatorTypeCode");

                    b.ToTable("OperatorTypesEntities");

                    b.HasData(
                        new
                        {
                            OperatorTypeCode = "Eq",
                            Name = "Equal"
                        },
                        new
                        {
                            OperatorTypeCode = "NEq",
                            Name = "NotEqual"
                        },
                        new
                        {
                            OperatorTypeCode = "Gt",
                            Name = "GreaterThan"
                        },
                        new
                        {
                            OperatorTypeCode = "Gte",
                            Name = "GreaterThanOrEqual"
                        },
                        new
                        {
                            OperatorTypeCode = "Lt",
                            Name = "LessThan"
                        },
                        new
                        {
                            OperatorTypeCode = "Lte",
                            Name = "LessThanOrEqual"
                        },
                        new
                        {
                            OperatorTypeCode = "Stw",
                            Name = "StartsWith"
                        },
                        new
                        {
                            OperatorTypeCode = "Cte",
                            Name = "Contains"
                        });
                });

            modelBuilder.Entity("RuleBuilderInfra.Domain.Entities.RuleEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CategoryService")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityCategoryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("QueryExpression")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RuleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QueryExpression")
                        .IsUnique();

                    b.ToTable("RuleEntities");
                });

            modelBuilder.Entity("RuleBuilderInfra.Domain.Entities.ActionPropertiesEntity", b =>
                {
                    b.HasOne("RuleBuilderInfra.Domain.Entities.ActionEntity", "ActionEntity")
                        .WithMany("ActionPropertis")
                        .HasForeignKey("ActionEntityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActionEntity");
                });

            modelBuilder.Entity("RuleBuilderInfra.Domain.Entities.ActionRuleEntity", b =>
                {
                    b.HasOne("RuleBuilderInfra.Domain.Entities.ActionEntity", "ActionEntity")
                        .WithMany("actionRuleEntities")
                        .HasForeignKey("ActionEntityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RuleBuilderInfra.Domain.Entities.RuleEntity", "RuleEntity")
                        .WithMany("actionRuleEntities")
                        .HasForeignKey("RuleEntityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActionEntity");

                    b.Navigation("RuleEntity");
                });

            modelBuilder.Entity("RuleBuilderInfra.Domain.Entities.ActionRulePropertiesEntity", b =>
                {
                    b.HasOne("RuleBuilderInfra.Domain.Entities.ActionPropertiesEntity", "ActionPropertyEntity")
                        .WithMany("actionRulePropertiesEntities")
                        .HasForeignKey("ActionPropertyEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RuleBuilderInfra.Domain.Entities.ActionRuleEntity", "ActionRuleEntity")
                        .WithMany("actionRulePropertiesEntities")
                        .HasForeignKey("ActionRuleEntityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ActionPropertyEntity");

                    b.Navigation("ActionRuleEntity");
                });

            modelBuilder.Entity("RuleBuilderInfra.Domain.Entities.ConditionRuleEntity", b =>
                {
                    b.HasOne("RuleBuilderInfra.Domain.Entities.ConditionEntity", "ConditionEntity")
                        .WithMany("ConditionRuleEntities")
                        .HasForeignKey("ConditionEntityId");

                    b.HasOne("RuleBuilderInfra.Domain.Entities.ConditionRuleEntity", "Parent")
                        .WithMany("Conditions")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RuleBuilderInfra.Domain.Entities.RuleEntity", "RuleEntity")
                        .WithMany("ConditionRulesEntity")
                        .HasForeignKey("RuleEntityId");

                    b.Navigation("ConditionEntity");

                    b.Navigation("Parent");

                    b.Navigation("RuleEntity");
                });

            modelBuilder.Entity("RuleBuilderInfra.Domain.Entities.FieldOperatorJoiningEntity", b =>
                {
                    b.HasOne("RuleBuilderInfra.Domain.Entities.FieldTypesEntity", "FieldTypesEntity")
                        .WithMany("FieldOperatorJoiningEntities")
                        .HasForeignKey("FieldTypeCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RuleBuilderInfra.Domain.Entities.OperatorTypesEntity", "OperatorTypesEntity")
                        .WithMany("FieldOperatorJoiningEntities")
                        .HasForeignKey("OperatorTypeCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FieldTypesEntity");

                    b.Navigation("OperatorTypesEntity");
                });

            modelBuilder.Entity("RuleBuilderInfra.Domain.Entities.ActionEntity", b =>
                {
                    b.Navigation("ActionPropertis");

                    b.Navigation("actionRuleEntities");
                });

            modelBuilder.Entity("RuleBuilderInfra.Domain.Entities.ActionPropertiesEntity", b =>
                {
                    b.Navigation("actionRulePropertiesEntities");
                });

            modelBuilder.Entity("RuleBuilderInfra.Domain.Entities.ActionRuleEntity", b =>
                {
                    b.Navigation("actionRulePropertiesEntities");
                });

            modelBuilder.Entity("RuleBuilderInfra.Domain.Entities.ConditionEntity", b =>
                {
                    b.Navigation("ConditionRuleEntities");
                });

            modelBuilder.Entity("RuleBuilderInfra.Domain.Entities.ConditionRuleEntity", b =>
                {
                    b.Navigation("Conditions");
                });

            modelBuilder.Entity("RuleBuilderInfra.Domain.Entities.FieldTypesEntity", b =>
                {
                    b.Navigation("FieldOperatorJoiningEntities");
                });

            modelBuilder.Entity("RuleBuilderInfra.Domain.Entities.OperatorTypesEntity", b =>
                {
                    b.Navigation("FieldOperatorJoiningEntities");
                });

            modelBuilder.Entity("RuleBuilderInfra.Domain.Entities.RuleEntity", b =>
                {
                    b.Navigation("ConditionRulesEntity");

                    b.Navigation("actionRuleEntities");
                });
#pragma warning restore 612, 618
        }
    }
}
